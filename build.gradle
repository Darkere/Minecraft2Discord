buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'net.dv8tion:JDA:3.8.3_463'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.14.3-1.0.0'
group = 'ml.denis3d.minecraft2discord' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'minecraft2discord'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {
    jcenter()
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20190625-1.14.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    //noinspection GroovyAssignabilityCheck
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                minecraft2discord {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                minecraft2discord {
                    source sourceSets.main
                }
            }
        }
    }
}


dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.14.3-27.0.12'

    // Java Discord library
    shadow ('net.dv8tion:JDA:3.8.3_463') {
        exclude module: 'opus-java'
    }


}

build.dependsOn(shadowJar)

shadowJar {
    relocate 'org.apache.commons.collections4', 'ml.denis3d.repack.org.apache.commons.collections4'
    relocate 'gnu.trove', 'ml.denis3d.repack.gnu.trove'
    relocate "com.neovisionaries.ws.client", "ml.denis3d.repack.com.neovisionaries.ws.client"
    relocate "com.iwebpp.crypto", "ml.denis3d.repack.com.iwebpp.crypto"
    relocate "net.dv8tion.jda", "ml.denis3d.repack.net.dv8tion.jda"
    relocate "org.json", "ml.denis3d.repack.org.json"
    relocate "okio", "ml.denis3d.repack.okio"
    relocate "okhttp3", "ml.denis3d.repack.okhttp3"
    relocate "okhttp3", "ml.denis3d.repack.okhttp3"
    relocate "org.slf4j", "ml.denis3d.repack.org.slf4j"
    classifier ''
    configurations = [project.configurations.shadow]
    dependencies{
        exclude(dependency('org.jetbrains:annotations'))
        exclude(dependency('com.google.code.findbugs:jsr305'))
    }
}

reobf {
    shadowJar
}


artifacts {
    archives shadowJar
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    classifier "slim"
    manifest {
        attributes([
            "Specification-Title": "Minecraft2Discord",
            "Specification-Vendor": "Denis3D",
            "Specification-Version": "${version}", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Denis3D",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
